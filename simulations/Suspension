#ARCHITECTURE OVERVIEW:
#1. DONE: Import two data files: Rover info and soil info
#   -100% complete:
#       *DONE:implement soil ini file
#2. Compute traction information from solid case
#   -99% complete:
#       *DONE: compute maximum thrust function
#       *DONE: compute compaction resistance function
#       *DONE? : compute bulldozing resistance function
#       *DONE: compute rolling resistance (use coeff of 0 if negligable) function
#       *DONE: compute gravitational resistance function
#       *DONE: create aggregate drawbar pull function
#3. Create angle geometry calculator for pivot and 4 bar cases
#   -100% complete:
#       *DONE: differentiate from obstacle mode and slope mode
#       *DONE: from rover geometry and height, get alpha and beta
#4. Create matrix calculator
#   -5% comlete:
#       *function to generate computation matrix for each scenario:
#           1. rover climbing obstacle of height h lower than radius
#           2. DONE: rover climbing obstacle of height h higher than radius
#           3. rover going across a slope
#           4. rover driving straight
#5. create simulation
#   -0% complete:
#       *Calculate drawbar pull for each case mentioned previously
#       *calculate max velocity, acceleration and gradeability
#       *calculate required torque for stall conditions (adhesion based)
#       *calculate stability
#6. create simulation to optimize rover parameters
#   -0% complete:
#       *given rover parameter and acceptable ranges, run through all instances and find ideal case for each performance parameters
#7. optimize four bar rover
#   -0% complete:
#   -Based on previous ideal parameters, using all variable 4 bar variables, find ideal case for each performance parameters
###IMPORT LIBRARIES###
from scipy.optimize import fsolve
import math
import numpy as np
import configparser
import csv
import os
import sys
#file_dir = os.path.dirname(__file__)
#sys.path.append(file_dir)
import Solvers
###ROVER CLASS SETUP###
class rover:
    def __init__(self, roverconfiguration, solid_wheel = True):
        self.wheel_mass = float(roverconfiguration['Weight Values (in kg)']['wheel_mass'])
        self.bogie_mass = float(roverconfiguration['Weight Values (in kg)']['bogie_mass'])
        self.wheel_link_mass = float(roverconfiguration['Weight Values (in kg)']['wheel_link_mass'])
        self.bogie_total_mass = self.bogie_mass + 2*self.wheel_link_mass
        self.body_mass = float(roverconfiguration['Weight Values (in kg)']['body_mass'])
        self.total_mass = self.wheel_mass + self.bogie_total_mass + self.body_mass
        self.coefficient_of_friction = float(roverconfiguration['Weight Values (in kg)']['coefficient_of_friction'])
        self.bogie_length = float(roverconfiguration['Lengths (in m)']['bogie_length'])
        self.wheel_link_length = float(roverconfiguration['Lengths (in m)']['wheel_link_length'])
        self.wheel_chassis_height = self.wheel_link_length + float(roverconfiguration['CG']['bogie_tube_height'])
        self.wheel_radius = float(roverconfiguration['Lengths (in m)']['wheel_radius'])
        self.wheel_width = float(roverconfiguration['Lengths (in m)']['wheel_width'])
        self.body_cg_length = float(roverconfiguration['CG']['body_cg_length'])
        self.cg_length = float(roverconfiguration['Lengths (in m)']['cg_length'])
        self.cg_height = float(roverconfiguration['Lengths (in m)']['cg_height'])
        self.poisson = float(roverconfiguration['Material']['poisson'])
        self.youngs_modulus = float(roverconfiguration['Material']['youngs_modulus'])
        self.solid_wheel = solid_wheel
        self.slope_matrix = np.zeros((15,15))
        self.low_obs_matrix = np.zeros((15,15))
        self.high_obs_matrix = np.zeros((15,15))
        self.b_slope = np.zeros(15)
        self.b_low_obs = np.zeros(15)
        self.b_high_obs = np.zeros(15)
    def A_set(self, matrix, r, c, value):
        if(matrix is 0):
            self.slope_matrix[r][c] = value
        if(matrix is 1):
            self.low_obs_matrix[r][c] = value
        if(matrix is 2):
            self.high_obs_matrix[r][c] = value
        else:
            print("A MATRIX SET ERROR")
    def b_set(self, matrix, r, value):
        if(matrix is 0):
            self.b_slope[r] = value
        if(matrix is 1):
            self.b_low_obs[r] = value
        if(matrix is 2):
            self.b_high_obs[r] = value
        else:
            print("b MATRIX SET ERROR")
###SOIL CLASS SETUP###
class soil:
    def __init__(self, soilconfig):
        self.n = float(soilconfig['Bekker parameters']['n'])
        self.kc = float(soilconfig['Bekker parameters']['kc'])
        self.kphi = float(soilconfig['Bekker parameters']['kphi'])
        self.c = float(soilconfig['Bekker parameters']['c'])
        self.phi = float(soilconfig['Bekker parameters']['phi'])
        self.density = float(soilconfig['Misc']['density'])
        self.poisson = float(soilconfig['Misc']['poisson'])
        self.youngs_modulus = float(soilconfig['Misc']['youngs_modulus'])
###GEOMETRY CALCULAATORS###
def angle_calculation(rover, h):
    if rover.four_bar is False:
        alpha = math.asin((h- rover.wheel_radius)/rover.bogie_length)
        beta = (rover.wheel_link_length*math.cos(alpha) + 0.5*rover.bogie_length*math.sin(alpha) - rover.wheel_link_length)/(1.5*rover.bogie_length)
        return alpha, beta
###TERRAMECHANICS CALCULATIONS###
def compute_solid_wheel_contact_length(rover, soil, W):
    Ce = (1-math.pow(rover.poisson,2))/rover.youngs_modulus \
     + (1-math.pow(soil.poisson,2))/soil.youngs_modulus
    return 1.60*math.sqrt(W * 2 * rover.wheel_radius * Ce / rover.wheel_width)
def compute_contact_area(rover, soil, W):
    if rover.solid_wheel is True:
        l_con = compute_solid_wheel_contact_length(rover, soil, W)
        return l_con * rover.wheel_width
    else:
        print("ERROR: FLEXIBLE WHEEL MODULE NOT IMPLEMENTED")
        return 0
def compute_wheel_thrust(c, phi, Aw, W, slope_angle, J_K = 3):
    return (c*Aw + W*math.cos(slope_angle*math.pi/180.0)*math.tan(phi*math.pi/180.0))*(1.0-math.exp(-J_K))
def compute_compaction_resistance(b, kc, kphi, l,  z, n):
    if(b > l):
        return b*(kc/l + kphi)*math.pow(z,n+1)/(n+1)
    else:
        return b*(kc/b + kphi)*math.pow(z,n+1)/(n+1)
def compute_bulldozing_resistance(d, b, z, phi, c, W, rho, g):
    phi *= math.pi/180
    alpha = math.acos(1 - 2*z/d)
    sw = rho* g
    l_p = z*math.pow(math.tan(0.25*math.pi - phi/2),2)
    NC = W/(2*l_p*b*c)
    phi_n = math.atan(2.0*math.tan(phi)/3.0)
    kc = (NC - math.tan(phi_n))*math.pow(math.cos(phi_n),2)
    N_sw = W/(2 * b * sw)
    k_sw = (2*N_sw/math.tan(phi_n) + 1)*math.pow(math.cos(phi_n),2)
    return b*math.sin(alpha + phi)*(2*z*c*kc/1000 + sw*z*z*k_sw)/(2*math.sin(alpha)*math.cos(phi)) \
    + (math.pi*sw*math.pow(l_p,3)*(90 - phi*180/math.pi)/540 + math.pi*c*l_p*l_p/180 + c*l_p*l_p*math.tan(0.25*math.pi + phi/2))
def compute_gravitational_resistance(W, slope_angle):
    slope_angle*math.pi/180
    return W*math.sin(slope_angle)
def compute_rolling_resistance(W, fr):
    return fr*W
def compute_total_resistance(d, b, z, W, l, slope_angle, fr, c, n, phi, kc, kphi, rho, g):
    Rc = compute_compaction_resistance(b, kc, kphi, l, z, n)
    Rb = compute_bulldozing_resistance(d, b, z, phi, c, W, rho, g)
    Rg = compute_gravitational_resistance(W, slope_angle)
    Rf = compute_rolling_resistance(W, fr)
    return Rc + Rb + Rg + Rf
def compute_drawbar_pull(d, b, z, W, l, Aw, slope_angle, fr, c, n, phi, kc, kphi, rho, g, J_K = 3):
    H = compute_wheel_thrust(c, phi, Aw, W, slope_angle, J_K)
    R = compute_total_resistance(d, b, z, W, l, slope_angle, fr, c, n, phi, kc, kphi, rho, g)
    return H - R
###CALCULATION MATRIX SETUP###
def mew_approximation(rover, soil):
    if rover.solid_wheel is True:
        W = rover.total_mass*g/3
        Aw = compute_contact_area(rover, soil, W)
        Te = compute_wheel_thrust(soil.c, soil.phi, Aw, W, 0)
        return Te/W
###INI PARSING###
rovconfig = configparser.ConfigParser()
rovconfig.sections()
rovconfig.read('Roverdata.ini')
soilconfig = configparser.ConfigParser()
soilconfig.sections()
soilconfig.read('Soil.ini')
###MAIN BODY###
rover1 = rover(rovconfig, True)
mars_soil = soil(soilconfig)
###Run slope calcs
if os.path.exists('sloperesults.csv'):
   os.remove('sloperesults.csv')
for theta in np.arange(0.1, 60, 0.1):
     solution = fsolve(Solvers.setup_slope_matrix, (71.5,64.6,87.6,71.53,130.35,41.17,45.9,37.1,60.1,11.0,4.55,6.18,41.2,73.03,0.56), (rover1, theta))
     with open('sloperesults.csv', 'a') as csvfile:
         writer = csv.writer(csvfile)
         writer.writerow([theta, solution[14]])
     if( solution[6] < 1):
         print("wheelie at: ", theta)
         break
#for h in np.arange(0.01, rover1.wheel_radius, 0.001):
#     solution = fsolve(setup_low_obs_matrix, (71.5,64.6,87.6,71.53,130.35,41.17,45.9,37.1,60.1,11.0,4.55,6.18,41.2,73.03,0.56), (rover1, h))
#     with open('obsresults.csv', 'a') as csvfile:
#         writer = csv.writer(csvfile)
#         writer.writerow([h, solution[14]])
#for h in np.arange(0.151, rover1.wheel_radius + rover1.bogie_length, 0.001):
#     solution = fsolve(setup_high_obs_matrix, (71.5,64.6,87.6,71.53,130.35,41.17,45.9,37.1,60.1,11.0,4.55,6.18,41.2,73.03,0.56), (rover1, h))
#     with open('obsresults.csv', 'a') as csvfile:
#         writer = csv.writer(csvfile)
#         writer.writerow([h, solution[14]])
#solution = fsolve(setup_slope_matrix, (71.5,64.6,87.6,71.53,130.35,41.17,45.9,37.1,60.1,11.0,4.55,6.18,41.2,73.03,0.921), (rover1, 35))
#print("RESULTS:")
#print("NORMAL AT A:", solution[0])
#print("NORMAL AT B:", solution[1])
#print("NORMAL AT C:", solution[2])
#print("X REACTION AT A:", solution[3])
#print("X REACTION AT B:", solution[4])
#print("X REACTION AT C:", solution[5])
#print("Y REACTION AT A:", solution[6])
#print("Y REACTION AT B:", solution[7])
#print("Y REACTION AT C:", solution[8])
#print("WHEEL TORQUE AT A:", solution[9])
#print("WHEEL TORQUE AT B:", solution[10])
#print("WHEEL TORQUE AT C:", solution[11])
#print("BOGIE X REACTION:", solution[12])
#print("BOGIE Y REACTION:", solution[13])
#print("MEW:", solution[14])
