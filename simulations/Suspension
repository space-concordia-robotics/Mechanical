#ARCHITECTURE OVERVIEW:
#1. DONE: Import two data files: Rover info and soil info
#   -100% complete:
#       *DONE:implement soil ini file
#2. Compute traction information from solid case
#   -0% complete:
#       *compute maximum thrust function
#       *compute compaction resistance function
#       *compute bulldozing resistance function
#       *compute rolling resistance (use coeff of 0 if negligable) function
#       *compute gravitational resistance function
#       *create aggregate drawbar pull function
#3. Create angle geometry calculator for pivot and 4 bar cases
#   -0% complete:
#       *differentiate from obstacle mode and slope mode
#       *from rover geometry and height, get alpha and beta
#4. Create matrix calculator
#   -1% comlete:
#       *function to generate computation matrix for each scenario:
#           1. rover climbing obstacle of height h lower than radius
#           2. rover climbing obstacle of height h higher than radius
#           3. rover going across a slope
#           4. rover driving straight
#5. create simulation
#   -0% complete:
#       *Calculate drawbar pull for each case mentioned previously
#       *calculate max velocity, acceleration and gradeability
#       *calculate required torque for stall conditions (adhesion based)
#       *calculate stability
#6. create simulation to optimize rover parameters
#   -0% complete:
#       *given rover parameter and acceptable ranges, run through all instances and find ideal case for each performance parameters
#7. optimize four bar rover
#   -0% complete:
#   -Based on previous ideal parameters, using all variable 4 bar variables, find ideal case for each performance parameters
from scipy.optimize import fsolve
import math
import numpy as np
import configparser

class rover:
    def __init__(self, roverconfiguration, four_bar, solid_wheel = True):
        self.wheel_mass = float(roverconfiguration['Weight Values (in kg)']['wheel_mass'])
        self.wheel_mass = float(roverconfiguration['Weight Values (in kg)']['bogie_mass'])
        self.wheel_mass = float(roverconfiguration['Weight Values (in kg)']['body_mass'])
        self.coefficient_of_friction = float(roverconfiguration['Weight Values (in kg)']['coefficient_of_friction'])
        self.bogie_length = float(roverconfiguration['Lengths (in m)']['bogie_length'])
        self.wheel_link_length = float(roverconfiguration['Lengths (in m)']['wheel_link_length'])
        self.wheel_radius = float(roverconfiguration['Lengths (in m)']['wheel_radius'])
        self.wheel_width = float(roverconfiguration['Lengths (in m)']['wheel_width'])
        self.cg_length = float(roverconfiguration['Lengths (in m)']['cg_length'])
        self.cg_height = float(roverconfiguration['Lengths (in m)']['cg_height'])
        self.four_bar = four_bar
        self.solid_wheel = solid_wheel
        self.slope_matrix = np.empty((15,15))
        self.low_obs_matrix = np.empty((15,15))
        self.high_obs_matrix = np.empty((15,15))


def compute_solid_wheel_contact_length(poisson_wheel, poisson_soil, youngs_wheel, youngs_soil, W, d, b):
    Ce = (1-math.pow(poisson_wheel,2))/youngs_wheel + (1-math.pow(poisson_soil,2))/youngs_soil
    return 1.60*math.sqrt(W*d*Ce/b)
def compute_wheel_thrust(c, phi, Aw, W, slope_angle, J_K = 3):
    return (c*Aw + W*math.cos(slope_angle*math.pi/180.0)*math.tan(phi*math.pi/180.0))*(1.0-math.exp(-J_K))
def compute_compaction_resistance(b, kc, kphi, l,  z, n):
    if(b > l):
        return b*(kc/l + kphi)*math.pow(z,n+1)/(n+1)
    else:
        return b*(kc/b + kphi)*math.pow(z,n+1)/(n+1)
def compute_bulldozing_resistance(d, b, z, phi, c, W, rho, g):
    phi *= math.pi/180
    alpha = math.acos(1 - 2*z/d)
    sw = rho* g
    l_p = z*math.pow(math.tan(0.25*math.pi - phi/2),2)
    NC = W/(2*l_p*b*c)
    phi_n = math.atan(2.0*math.tan(phi)/3.0)
    kc = (NC - math.tan(phi_n))*math.pow(math.cos(phi_n),2)
    N_sw = W/(2 * b * sw)
    k_sw = (2*N_sw/math.tan(phi_n) + 1)*math.pow(math.cos(phi_n),2)
    return b*math.sin(alpha + phi)*(2*z*c*kc/1000 + sw*z*z*k_sw)/(2*math.sin(alpha)*math.cos(phi)) \
    + (math.pi*sw*math.pow(l_p,3)*(90 - phi*180/math.pi)/540 + math.pi*c*l_p*l_p/180 + c*l_p*l_p*math.tan(0.25*math.pi + phi/2))
def compute_gravitational_resistance(W, slope_angle):
    slope_angle*math.pi/180
    return W*math.sin(slope_angle)
def compute_rolling_resistance(W, fr):
    return fr*W
def compute_drawbar_pull(d, b, z, W, l, Aw, slope_angle, fr, c, n, phi, kc, kphi, rho, g, J_K = 3):
    H = compute_wheel_thrust(c, phi, Aw, W, slope_angle, J_K)
    Rc = compute_compaction_resistance(b, kc, kphi, l, z, n)
    Rb = compute_bulldozing_resistance(d, b, z, phi, c, W, rho, g)
    Rg = compute_gravitational_resistance(W, slope_angle)
    Rf = compute_rolling_resistance(W, fr)

    print(Rb)
    return H - Rc - Rb - Rg - Rf

rovconfig = configparser.ConfigParser()
rovconfig.sections()
rovconfig.read('Roverdata.ini')
soilconfig = configparser.ConfigParser()
soilconfig.sections()
soilconfig.read('Soil.ini')
rover1 = rover(rovconfig, False, True)
print(compute_drawbar_pull(0.3, 0.18, 0.00154930867, 81.75, compute_solid_wheel_contact_length(0.49, 0.39, 55000000, 51000000, 81.75, 0.3, 0.18), 0.0005865381856, 0, 0, 960, 0.705, 30.8, 6940, 505800, 1550, 9.81))
