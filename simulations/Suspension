#ARCHITECTURE OVERVIEW:
#1. DONE: Import two data files: Rover info and soil info
#   -100% complete:
#       *DONE:implement soil ini file
#2. Compute traction information from solid case
#   -99% complete:
#       *DONE: compute maximum thrust function
#       *DONE: compute compaction resistance function
#       *DONE? : compute bulldozing resistance function
#       *DONE: compute rolling resistance (use coeff of 0 if negligable) function
#       *DONE: compute gravitational resistance function
#       *DONE: create aggregate drawbar pull function
#3. Create angle geometry calculator for pivot and 4 bar cases
#   -1% complete:
#       *differentiate from obstacle mode and slope mode
#       *from rover geometry and height, get alpha and beta
#4. Create matrix calculator
#   -5% comlete:
#       *function to generate computation matrix for each scenario:
#           1. rover climbing obstacle of height h lower than radius
#           2. rover climbing obstacle of height h higher than radius
#           3. rover going across a slope
#           4. rover driving straight
#5. create simulation
#   -0% complete:
#       *Calculate drawbar pull for each case mentioned previously
#       *calculate max velocity, acceleration and gradeability
#       *calculate required torque for stall conditions (adhesion based)
#       *calculate stability
#6. create simulation to optimize rover parameters
#   -0% complete:
#       *given rover parameter and acceptable ranges, run through all instances and find ideal case for each performance parameters
#7. optimize four bar rover
#   -0% complete:
#   -Based on previous ideal parameters, using all variable 4 bar variables, find ideal case for each performance parameters
###IMPORT LIBRARIES###
from scipy.optimize import fsolve
import math
import numpy as np
import configparser
###CONSTANTS SETUP###
g = 9.80655
###ROVER CLASS SETUP###
class rover:
    def __init__(self, roverconfiguration, four_bar, solid_wheel = True):
        self.wheel_mass = float(roverconfiguration['Weight Values (in kg)']['wheel_mass'])
        self.bogie_mass = float(roverconfiguration['Weight Values (in kg)']['bogie_mass'])
        self.body_mass = float(roverconfiguration['Weight Values (in kg)']['body_mass'])
        self.total_mass = self.wheel_mass + self.bogie_mass + self.body_mass
        self.coefficient_of_friction = float(roverconfiguration['Weight Values (in kg)']['coefficient_of_friction'])
        self.bogie_length = float(roverconfiguration['Lengths (in m)']['bogie_length'])
        self.wheel_link_length = float(roverconfiguration['Lengths (in m)']['wheel_link_length'])
        self.wheel_radius = float(roverconfiguration['Lengths (in m)']['wheel_radius'])
        self.wheel_width = float(roverconfiguration['Lengths (in m)']['wheel_width'])
        self.cg_length = float(roverconfiguration['Lengths (in m)']['cg_length'])
        self.cg_height = float(roverconfiguration['Lengths (in m)']['cg_height'])
        self.poisson = float(roverconfiguration['Material']['poisson'])
        self.youngs_modulus = float(roverconfiguration['Material']['youngs_modulus'])
        self.four_bar = four_bar
        self.solid_wheel = solid_wheel
        self.slope_matrix = np.empty((15,15))
        self.low_obs_matrix = np.empty((15,15))
        self.high_obs_matrix = np.empty((15,15))
    def compute_cg():
        return 1
        #computes centre of gravity based on cg of components
        #assumption: wheel CG at center, bogie symmetric
    def element_set(self, matrix, r, c, value):
        if(matrix is 0):
            self.slope_matrix[r][c] = value
        if(matrix is 1):
            self.low_obs_matrix[r][c] = value
        if(matrix is 2):
            self.high_obs_matrix[r][c] = value
        else:
            print("ELEMENT SET ERROR")
###SOIL CLASS SETUP###
class soil:
    def __init__(self, soilconfig):
        self.n = float(soilconfig['Bekker parameters']['n'])
        self.kc = float(soilconfig['Bekker parameters']['kc'])
        self.kphi = float(soilconfig['Bekker parameters']['kphi'])
        self.c = float(soilconfig['Bekker parameters']['c'])
        self.phi = float(soilconfig['Bekker parameters']['phi'])
        self.density = float(soilconfig['Misc']['density'])
        self.poisson = float(soilconfig['Misc']['poisson'])
        self.youngs_modulus = float(soilconfig['Misc']['youngs_modulus'])
###GEOMETRY CALCULAATORS###
def pivot_angle_calculation(h, bogie_length, body_length, wheel_link_length):
    return math.asin(h/bogie_length)
###TERRAMECHANICS CALCULATIONS###
def compute_solid_wheel_contact_length(rover, soil, W):
    Ce = (1-math.pow(rover.poisson,2))/rover.youngs_modulus \
     + (1-math.pow(soil.poisson,2))/soil.youngs_modulus
    return 1.60*math.sqrt(W*d*Ce/b)

def compute_wheel_thrust(c, phi, Aw, W, slope_angle, J_K = 3):
    return (c*Aw + W*math.cos(slope_angle*math.pi/180.0)*math.tan(phi*math.pi/180.0))*(1.0-math.exp(-J_K))
def compute_compaction_resistance(b, kc, kphi, l,  z, n):
    if(b > l):
        return b*(kc/l + kphi)*math.pow(z,n+1)/(n+1)
    else:
        return b*(kc/b + kphi)*math.pow(z,n+1)/(n+1)
def compute_bulldozing_resistance(d, b, z, phi, c, W, rho, g):
    phi *= math.pi/180
    alpha = math.acos(1 - 2*z/d)
    sw = rho* g
    l_p = z*math.pow(math.tan(0.25*math.pi - phi/2),2)
    NC = W/(2*l_p*b*c)
    phi_n = math.atan(2.0*math.tan(phi)/3.0)
    kc = (NC - math.tan(phi_n))*math.pow(math.cos(phi_n),2)
    N_sw = W/(2 * b * sw)
    k_sw = (2*N_sw/math.tan(phi_n) + 1)*math.pow(math.cos(phi_n),2)
    return b*math.sin(alpha + phi)*(2*z*c*kc/1000 + sw*z*z*k_sw)/(2*math.sin(alpha)*math.cos(phi)) \
    + (math.pi*sw*math.pow(l_p,3)*(90 - phi*180/math.pi)/540 + math.pi*c*l_p*l_p/180 + c*l_p*l_p*math.tan(0.25*math.pi + phi/2))
def compute_gravitational_resistance(W, slope_angle):
    slope_angle*math.pi/180
    return W*math.sin(slope_angle)
def compute_rolling_resistance(W, fr):
    return fr*W
def compute_total_resistance(d, b, z, W, l, slope_angle, fr, c, n, phi, kc, kphi, rho, g):
    Rc = compute_compaction_resistance(b, kc, kphi, l, z, n)
    Rb = compute_bulldozing_resistance(d, b, z, phi, c, W, rho, g)
    Rg = compute_gravitational_resistance(W, slope_angle)
    Rf = compute_rolling_resistance(W, fr)
    return Rc + Rb + Rg + Rf
def compute_drawbar_pull(d, b, z, W, l, Aw, slope_angle, fr, c, n, phi, kc, kphi, rho, g, J_K = 3):
    H = compute_wheel_thrust(c, phi, Aw, W, slope_angle, J_K)
    R = compute_total_resistance(d, b, z, W, l, slope_angle, fr, c, n, phi, kc, kphi, rho, g)
    return H - R
###CALCULATION MATRIX SETUP
def mew_approximation(rover, soil, W):
    if Solid is True:
        compute_solid_wheel_contact_length(poisson_wheel, poisson_soil, youngs_wheel, youngs_soil, W, d, b)
        Te = compute_wheel_thrust(c, phi, Aw, W, 0)
        return 3*Te/(rover.total_mass*g)
def setup_slope_matrix(rover, slope_angle):
    return 1
def setup_low_obs_matrix(rover, h):
    return 1
def setup_high_obs_matrix(rover, h):
    rover.element_set(2, 0, 0, 1)
    rover.element_set(2, 0, 1, -1)
    rover.element_set(2, 1, 2, -1)
###INI PARSING###
rovconfig = configparser.ConfigParser()
rovconfig.sections()
rovconfig.read('Roverdata.ini')
soilconfig = configparser.ConfigParser()
soilconfig.sections()
soilconfig.read('Soil.ini')
###MAIN BODY###
rover1 = rover(rovconfig, False, True)
